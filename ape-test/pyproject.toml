[project]
name = "ape-test"
authors = [
  { name = "ape-test", email = "king.arthur@camelot.bt" }
]
version = "0.0.1"
description = "A demo project to test the new cookiecutter template for ape"
readme = "README.md"
# license = { file = "LICENSE" }
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
requires-python = ">=3.11"
dependencies = [
    "eth-ape>=0.8.36",
]

[project.urls]
Documentation = "https://Aviksaikat.github.io/ape-test/"
Source = "https://github.com/Aviksaikat/ape-test"

[project.optional-dependencies]
# Development dependencies
dev = [
    "eth-ape>=0.8.36",
]

# Linting dependencies  
lint = [
    "mypy>=1.8.0",
    "ruff>=0.6.0",
]

# Documentation dependencies
docs = [

]

# Testing dependencies
test = [
    "pytest>=8.0.0",
]

#########
# Build #
#########

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/ape_test"]


##################
# External Tools #
##################

[tool.mypy]
files = ["ape_test"]
exclude = ["build/", "dist/", "docs/", "tests/*"]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true


[tool.ruff]
target-version = "py311"
line-length = 120
indent-width = 4
include = [
  "src/**/*.py",
  "src/**/*.pyi", 
  "tests/**/*.py",
  "tests/**/*.pyi"
]
exclude = ["tests"]

[tool.ruff.lint]
preview = true # preview features & checks, use with caution
extend-select = [ # features in preview
    "W292", # missing-newline-at-end-of-file
]
select = [
    "A",
    "ARG",
    "B", 
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT", # Boolean trap
    "ICN",
    "ISC",
    "I",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
    "RUF100", # Automatically remove unused # noqa directives
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    "PLC1901", # empty string comparisons
    "PLW2901", # `for` loop variable overwritten
    "SIM114", # Combine `if` branches using logical `or` operator
    "E203", # Whitespace before :, needed for black compatability and also `ruff format`
    "ISC001", # causes unexpected behaviour with formatter
]


[tool.ruff.lint.isort]
known-first-party = ["ape_test"]


[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"


[tool.ruff.lint.per-file-ignores]
# Allow print/pprint
"examples/*" = ["T201"]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]


[tool.pytest.ini_options]
# addopts = "--cov=src/ape_test/ --cov-report=term-missing"


##############
# Rye Scripts #
##############

[tool.rye.scripts]
# Linting scripts
typing = { call = "mypy_check" }
lint = { call = "lint_all" }
lint-check = { call = "lint_check_all" }

# Documentation scripts  
docs-serve = "mkdocs serve"
docs-build = "mkdocs build --clean --strict"
docs-validate = "linkchecker --config .linkcheckerrc --ignore-url=/reference --ignore-url=None site"
docs-build-check = { chain = ["docs-build", "docs-validate"] }

# Testing scripts
test = "pytest"
test-cov-xml = "pytest --cov-report=xml"

[tool.rye.scripts.mypy_check]
cmd = [
    "sh", "-c", 
    "echo \"VERSION: `mypy --version`\" && mypy --install-types --non-interactive"
]

[tool.rye.scripts.lint_all]
cmd = [
    "sh", "-c",
    "echo \"VERSION: `ruff --version`\" && ruff format . && ruff check . --fix && mypy src/ape_test/"
]

[tool.rye.scripts.lint_check_all] 
cmd = [
    "sh", "-c",
    "echo \"VERSION: `ruff --version`\" && ruff format --check . && ruff check . && mypy src/ape_test/"
]
